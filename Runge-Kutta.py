import numpy as np

import math

import matplotlib.pyplot as plt

def f(x,y):

    return x*math.e**((-x)**2) - 2*x*y       #сюда вводить свою функцию

def RK4(f, a, b, y0, h):
    #функция для решения дифференциального уравнения методом Рунге-Кутта 4 порядка

    n = int((b-a)/h) + 1 #Вычисляем количество точек, которые возьмем за период времен, для решения уравнения.

    # Для этого находим разницу между правой (b) и левой (a) границами интервала и делим на шаг (h). Затем прибавляем 1,

    # так как мы включаем левую границу в решение уравнения.

    x = np.linspace(a, b, n) #Вычисляем массив точек для интервала от a до b с количеством точек n.

    y = np.zeros([n]) #Создаем массив для значения решения дифференциального уравнения на каждой из точек, заполняем его нулями.

    y[0] = y0 #Задаем начальное значение y0 для первого элемента массива y.

    for i in range(1, n):           #Проходим по всем точкам от 1 до n-1

        k1 = h * f(x[i-1], y[i-1])

        k2 = h * f(x[i-1] + h/2, y[i-1] + k1/2)

        k3 = h * f(x[i-1] + h/2, y[i-1] + k2/2)

        k4 = h * f(x[i-1] + h, y[i-1] + k3)

        y[i] = y[i-1] + (1/6) * (k1 + 2*k2 + 2*k3 + k4)

    return x, y    # Возвращаем массив x (массив всех точек) и массив y (массив значений для каждой точки)

a = 0       # начальная точка

b = 1       # конечная точка

y0 = 0      # начальное значение

h = 0.05     # шаг

#решение дифференциального уравнения и построение графика

x, y = RK4(f, a, b, y0, h)

for i in range(len(x)):
    print(f"x = {round(x[i], 3)} ; y = {round(y[i], 5)}")

plt.plot(x, y)

plt.xlabel('x')

plt.ylabel('y(x)')

plt.title('Решение дифференциального уравнения методом Рунге-Кутта')

plt.grid(True)

plt.show()
